{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's OpenVeo Manage? OpenVeo Manage is an OpenVeo plugin. OpenVeo Manage offers the possibility to manage encoders: List all encoders and groups of encoders Create / remove encoders or groups of encoders Create / remove scheduled jobs from encoders or group of encoders Display encoders' information Start, tag and stop a record Screenshots Back end manage Back end manage group detail","title":"INTRODUCTION"},{"location":"#whats-openveo-manage","text":"OpenVeo Manage is an OpenVeo plugin. OpenVeo Manage offers the possibility to manage encoders: List all encoders and groups of encoders Create / remove encoders or groups of encoders Create / remove scheduled jobs from encoders or group of encoders Display encoders' information Start, tag and stop a record","title":"What's OpenVeo Manage?"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#back-end-manage","text":"","title":"Back end manage"},{"location":"#back-end-manage-group-detail","text":"","title":"Back end manage group detail"},{"location":"getting-started/","text":"Installation From OpenVeo root: npm install @openveo/manage --production Start / Restart OpenVeo OpenVeo Manage is now installed. You can start / restart OpenVeo: node server.js Log to the back end You can now log to the back end to access Manage plugin administration pages.","title":"Getting started"},{"location":"getting-started/#installation","text":"From OpenVeo root: npm install @openveo/manage --production","title":"Installation"},{"location":"getting-started/#start-restart-openveo","text":"OpenVeo Manage is now installed. You can start / restart OpenVeo: node server.js","title":"Start / Restart OpenVeo"},{"location":"getting-started/#log-to-the-back-end","text":"You can now log to the back end to access Manage plugin administration pages.","title":"Log to the back end"},{"location":"developers/api/","text":"Server side API (Node.js) You can find Manage Plugin API here . Backend client side API (AngularJS) OpenVeo Manage backend API exposes an API (AngularJS components) to be used by other plugins.","title":"API"},{"location":"developers/api/#server-side-api-nodejs","text":"You can find Manage Plugin API here .","title":"Server side API (Node.js)"},{"location":"developers/api/#backend-client-side-api-angularjs","text":"OpenVeo Manage backend API exposes an API (AngularJS components) to be used by other plugins.","title":"Backend client side API (AngularJS)"},{"location":"developers/back-end/","text":"Introduction Manage back end pages are loaded by OpenVeo . As expected by OpenVeo, Manage defines an AngularJS module ov.manage . Modules Main module ( ov.manage ) Manage main module defines the following routes: /manage/ to display the list of groups and devices /manage/group-detail/:id to display the content of a group Nb: Available services / filters defined in ov.manage modules are described in the API .","title":"Back end AngularJS"},{"location":"developers/back-end/#introduction","text":"Manage back end pages are loaded by OpenVeo . As expected by OpenVeo, Manage defines an AngularJS module ov.manage .","title":"Introduction"},{"location":"developers/back-end/#modules","text":"","title":"Modules"},{"location":"developers/back-end/#main-module-ovmanage","text":"Manage main module defines the following routes: /manage/ to display the list of groups and devices /manage/group-detail/:id to display the content of a group Nb: Available services / filters defined in ov.manage modules are described in the API .","title":"Main module (ov.manage)"},{"location":"developers/basics/","text":"Interact with encoders Manage uses OpenVeo Devices API Plugin to interact with encoders. Interact with browsers Manage uses OpenVeo Socket namespaces to control the back end interface and thus communicate with browsers in real time.","title":"Basics"},{"location":"developers/basics/#interact-with-encoders","text":"Manage uses OpenVeo Devices API Plugin to interact with encoders.","title":"Interact with encoders"},{"location":"developers/basics/#interact-with-browsers","text":"Manage uses OpenVeo Socket namespaces to control the back end interface and thus communicate with browsers in real time.","title":"Interact with browsers"},{"location":"developers/compilation/","text":"Introduction OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. OpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Manage compiles his own SASS and JavaScript files. Compiling for development You can compile the plugin for development using: npm run build:development You compile automatically the plugin when a file has changed using: npm run watch Compiling for production You can compile the plugin for production using: npm run build You'll find compiled CSS files in assets/be/css and compiled JavaScript files in assets/be/js .","title":"CSS / SASS / JS compilation"},{"location":"developers/compilation/#introduction","text":"OpenVeo back end is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. OpenVeo does not automatically compile SASS and JavaScript files for his plugins. Thus OpenVeo Manage compiles his own SASS and JavaScript files.","title":"Introduction"},{"location":"developers/compilation/#compiling-for-development","text":"You can compile the plugin for development using: npm run build:development You compile automatically the plugin when a file has changed using: npm run watch","title":"Compiling for development"},{"location":"developers/compilation/#compiling-for-production","text":"You can compile the plugin for production using: npm run build You'll find compiled CSS files in assets/be/css and compiled JavaScript files in assets/be/js .","title":"Compiling for production"},{"location":"developers/installation/","text":"Installation To install OpenVeo Manage you first need to install OpenVeo Core if not already done. OpenVeo Core Install @openveo/core package # Move to your workspace directory cd /WORKSPACE_PATH # Create directory for OpenVeo core mkdir openveo-core # Install OpenVeo core in this directory # See OpenVeo core documentation for more information Your workspace should look like this: . \u251c\u2500\u2500 openveo-core Create NPM links for openveo-api and openveo-test In a classical NPM project @openveo/manage package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/manage. For development, the first thing which comes to mind is to create a clone of the OpenVeo Manage project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time. We use NPM links to deal with this problem and store OpenVeo Manage inside /WORKSPACE_PATH/openveo-manage. But there is a catch. OpenVeo Manage need both @openveo/api and @openveo/test of the core. As packages @openveo/manage and @openveo/core are installed in two different locations, package @openveo/manage won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/manage. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test npm link OpenVeo Manage Clone project from git # Clone project into workspace cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-manage.git Your workspace should look like this: . \u251c\u2500\u2500 openveo-core \u251c\u2500\u2500 openveo-manage Install project's dependencies cd /WORKSPACE_PATH/openveo-manage npm ci Link openveo-api and openveo-test When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links. # Install dependencies @openveo/api and @openveo/test using NPM links cd /WORKSPACE_PATH/openveo-manage npm link @openveo/api @openveo/test Install plugin To be able to install @openveo/manage in @openveo/core we create an NPM link of @openveo/manage and refer to it in the core. Create an NPM link # Create a link for @openveo/manage cd /WORKSPACE_PATH/openveo-manage npm link Link project to core # Install dependency @openveo/manage using NPM links cd /WORKSPACE_PATH/openveo-core npm link @openveo/manage","title":"Installation"},{"location":"developers/installation/#installation","text":"To install OpenVeo Manage you first need to install OpenVeo Core if not already done.","title":"Installation"},{"location":"developers/installation/#openveo-core","text":"","title":"OpenVeo Core"},{"location":"developers/installation/#install-openveocore-package","text":"# Move to your workspace directory cd /WORKSPACE_PATH # Create directory for OpenVeo core mkdir openveo-core # Install OpenVeo core in this directory # See OpenVeo core documentation for more information Your workspace should look like this: . \u251c\u2500\u2500 openveo-core","title":"Install @openveo/core package"},{"location":"developers/installation/#create-npm-links-for-openveo-api-and-openveo-test","text":"In a classical NPM project @openveo/manage package should be installed in /WORKSPACE_PATH/openveo-core/node_modules/@openveo/manage. For development, the first thing which comes to mind is to create a clone of the OpenVeo Manage project inside this repository. But doing this will prevent npm install from working and will create a complicated development architecture with the risk to erase the repository at any time. We use NPM links to deal with this problem and store OpenVeo Manage inside /WORKSPACE_PATH/openveo-manage. But there is a catch. OpenVeo Manage need both @openveo/api and @openveo/test of the core. As packages @openveo/manage and @openveo/core are installed in two different locations, package @openveo/manage won't find @openveo/api nor @openveo/test in its Node.JS path. That's why we have to create NPM links for both @openveo/api and @openveo/test and refer to it inside @openveo/manage. # Create a link for @openveo/api cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/api npm link # Create a link for @openveo/test cd /WORKSPACE_PATH/openveo-core/node_modules/@openveo/test npm link","title":"Create NPM links for openveo-api and openveo-test"},{"location":"developers/installation/#openveo-manage","text":"","title":"OpenVeo Manage"},{"location":"developers/installation/#clone-project-from-git","text":"# Clone project into workspace cd /WORKSPACE_PATH/ git clone git@github.com:veo-labs/openveo-manage.git Your workspace should look like this: . \u251c\u2500\u2500 openveo-core \u251c\u2500\u2500 openveo-manage","title":"Clone project from git"},{"location":"developers/installation/#install-projects-dependencies","text":"cd /WORKSPACE_PATH/openveo-manage npm ci","title":"Install project's dependencies"},{"location":"developers/installation/#link-openveo-api-and-openveo-test","text":"When installing OpenVeo Core we created NPM links for @openveo/api and @openveo/test. We can now refer to this links. # Install dependencies @openveo/api and @openveo/test using NPM links cd /WORKSPACE_PATH/openveo-manage npm link @openveo/api @openveo/test","title":"Link openveo-api and openveo-test"},{"location":"developers/installation/#install-plugin","text":"To be able to install @openveo/manage in @openveo/core we create an NPM link of @openveo/manage and refer to it in the core.","title":"Install plugin"},{"location":"developers/installation/#create-an-npm-link","text":"# Create a link for @openveo/manage cd /WORKSPACE_PATH/openveo-manage npm link","title":"Create an NPM link"},{"location":"developers/installation/#link-project-to-core","text":"# Install dependency @openveo/manage using NPM links cd /WORKSPACE_PATH/openveo-core npm link @openveo/manage","title":"Link project to core"},{"location":"developers/unit-tests/","text":"Node.js unit tests Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command: npm run test","title":"Unit tests"},{"location":"developers/unit-tests/#nodejs-unit-tests","text":"Server side unit tests are performed using Mocha and Chai . You can launch server unit tests with the following command: npm run test","title":"Node.js unit tests"},{"location":"pluginsDevelopers/api/","text":"Server side API (Node.js) Actually, OpenVeo Manage does not expose any server side APIs. Backend client side API (AngularJS) OpenVeo Manage backend API exposes an API (AngularJS components) to be used by other plugins.","title":"API"},{"location":"pluginsDevelopers/api/#server-side-api-nodejs","text":"Actually, OpenVeo Manage does not expose any server side APIs.","title":"Server side API (Node.js)"},{"location":"pluginsDevelopers/api/#backend-client-side-api-angularjs","text":"OpenVeo Manage backend API exposes an API (AngularJS components) to be used by other plugins.","title":"Backend client side API (AngularJS)"}]}